# issue_understanding

```elixir
Application.fetch_env!(:fastrepl, :proxy_api_key)
Application.fetch_env!(:fastrepl, :proxy_api_base)
```

## Section

```elixir
defmodule Notebook do
  def render(repo_full_name, issue_number) do
    IO.puts("-- render --")

    issue =
      Fastrepl.Github.get_issue!(repo_full_name, issue_number)
      |> Fastrepl.Renderer.Github.render_issue()

    comments =
      Fastrepl.Github.list_issue_comments!(repo_full_name, issue_number)
      |> Enum.map(&Fastrepl.Renderer.Github.render_comment/1)
      |> Enum.join("\n\n")

    ret = issue <> comments
    ret |> Kino.Text.new() |> Kino.render()
    ret
  end

  def understand(rendered) do
    IO.puts("-- understand --")
    {:ok, ret} = Fastrepl.SemanticFunction.IssueUnderstanding.run(rendered)
    ret |> Kino.Text.new() |> Kino.render()
    ret
  end
end
```

```elixir
Notebook.render("BerriAI/litellm", "3673") |> Notebook.understand()
:ok
```

```elixir
Notebook.render("BerriAI/litellm", "3646") |> Notebook.understand()
:ok
```
